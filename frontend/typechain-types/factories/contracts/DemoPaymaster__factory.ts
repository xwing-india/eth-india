/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DemoPaymaster,
  DemoPaymasterInterface,
} from "../../contracts/DemoPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200151f3803806200151f8339818101604052810190620000379190620002c9565b80620000586200004c6200007160201b60201c565b6200007960201b60201c565b62000069816200013d60201b60201c565b50506200037e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200014d6200019160201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620001a16200007160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001c76200022260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000217906200035c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200027d8262000250565b9050919050565b6000620002918262000270565b9050919050565b620002a38162000284565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b600060208284031215620002e257620002e16200024b565b5b6000620002f284828501620002b2565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000344602083620002fb565b915062000351826200030c565b602082019050919050565b60006020820190508181036000830152620003778162000335565b9050919050565b611191806200038e6000396000f3fe6080604052600436106100c25760003560e01c8063b0d691fe1161007f578063c399ec8811610059578063c399ec881461020b578063d0e30db014610236578063f2fde38b14610240578063f465c77e14610269576100c2565b8063b0d691fe146101a0578063bb9fe6bf146101cb578063c23a5cea146101e2576100c2565b80630396cb60146100c7578063205c2878146100e3578063584465f21461010c578063715018a6146101355780638da5cb5b1461014c578063a9a2340914610177575b600080fd5b6100e160048036038101906100dc91906109c7565b6102a7565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610a88565b610340565b005b34801561011857600080fd5b50610133600480360381019061012e9190610b18565b6103db565b005b34801561014157600080fd5b5061014a610427565b005b34801561015857600080fd5b5061016161043b565b60405161016e9190610b54565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190610bf9565b610464565b005b3480156101ac57600080fd5b506101b561047e565b6040516101c29190610ccc565b60405180910390f35b3480156101d757600080fd5b506101e06104a4565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610ce7565b610530565b005b34801561021757600080fd5b506102206105c8565b60405161022d9190610d23565b60405180910390f35b61023e61066b565b005b34801561024c57600080fd5b5061026760048036038101906102629190610d6a565b6106fb565b005b34801561027557600080fd5b50610290600480360381019061028b9190610df2565b61077e565b60405161029e929190610ef1565b60405180910390f35b6102af6107a0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b815260040161030b9190610f30565b6000604051808303818588803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b505050505050565b6103486107a0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b81526004016103a5929190610f5a565b600060405180830381600087803b1580156103bf57600080fd5b505af11580156103d3573d6000803e3d6000fd5b505050505050565b6103e36107a0565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61042f6107a0565b610439600061081e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61046c6108e2565b6104788484848461093e565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ac6107a0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b50505050565b6105386107a0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016105939190610f83565b600060405180830381600087803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106259190610b54565b602060405180830381865afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190610fb3565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016106c79190610b54565b6000604051808303818588803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b5050505050565b6107036107a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990611063565b60405180910390fd5b61077b8161081e565b50565b6060600080604051806020016040528060008152509091509150935093915050565b6107a8610979565b73ffffffffffffffffffffffffffffffffffffffff166107c661043b565b73ffffffffffffffffffffffffffffffffffffffff161461081c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610813906110cf565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461093c57600080fd5b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109709061113b565b60405180910390fd5b600033905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6109a48161098b565b81146109af57600080fd5b50565b6000813590506109c18161099b565b92915050565b6000602082840312156109dd576109dc610981565b5b60006109eb848285016109b2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1f826109f4565b9050919050565b610a2f81610a14565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b6000819050919050565b610a6581610a52565b8114610a7057600080fd5b50565b600081359050610a8281610a5c565b92915050565b60008060408385031215610a9f57610a9e610981565b5b6000610aad85828601610a3d565b9250506020610abe85828601610a73565b9150509250929050565b6000610ad3826109f4565b9050919050565b6000610ae582610ac8565b9050919050565b610af581610ada565b8114610b0057600080fd5b50565b600081359050610b1281610aec565b92915050565b600060208284031215610b2e57610b2d610981565b5b6000610b3c84828501610b03565b91505092915050565b610b4e81610ac8565b82525050565b6000602082019050610b696000830184610b45565b92915050565b60038110610b7c57600080fd5b50565b600081359050610b8e81610b6f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610bb957610bb8610b94565b5b8235905067ffffffffffffffff811115610bd657610bd5610b99565b5b602083019150836001820283011115610bf257610bf1610b9e565b5b9250929050565b60008060008060608587031215610c1357610c12610981565b5b6000610c2187828801610b7f565b945050602085013567ffffffffffffffff811115610c4257610c41610986565b5b610c4e87828801610ba3565b93509350506040610c6187828801610a73565b91505092959194509250565b6000819050919050565b6000610c92610c8d610c88846109f4565b610c6d565b6109f4565b9050919050565b6000610ca482610c77565b9050919050565b6000610cb682610c99565b9050919050565b610cc681610cab565b82525050565b6000602082019050610ce16000830184610cbd565b92915050565b600060208284031215610cfd57610cfc610981565b5b6000610d0b84828501610a3d565b91505092915050565b610d1d81610a52565b82525050565b6000602082019050610d386000830184610d14565b92915050565b610d4781610ac8565b8114610d5257600080fd5b50565b600081359050610d6481610d3e565b92915050565b600060208284031215610d8057610d7f610981565b5b6000610d8e84828501610d55565b91505092915050565b600080fd5b60006101608284031215610db357610db2610d97565b5b81905092915050565b6000819050919050565b610dcf81610dbc565b8114610dda57600080fd5b50565b600081359050610dec81610dc6565b92915050565b600080600060608486031215610e0b57610e0a610981565b5b600084013567ffffffffffffffff811115610e2957610e28610986565b5b610e3586828701610d9c565b9350506020610e4686828701610ddd565b9250506040610e5786828701610a73565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e9b578082015181840152602081019050610e80565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ec382610e61565b610ecd8185610e6c565b9350610edd818560208601610e7d565b610ee681610ea7565b840191505092915050565b60006040820190508181036000830152610f0b8185610eb8565b9050610f1a6020830184610d14565b9392505050565b610f2a8161098b565b82525050565b6000602082019050610f456000830184610f21565b92915050565b610f5481610a14565b82525050565b6000604082019050610f6f6000830185610f4b565b610f7c6020830184610d14565b9392505050565b6000602082019050610f986000830184610f4b565b92915050565b600081519050610fad81610a5c565b92915050565b600060208284031215610fc957610fc8610981565b5b6000610fd784828501610f9e565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061104d602683610fe0565b915061105882610ff1565b604082019050919050565b6000602082019050818103600083015261107c81611040565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110b9602083610fe0565b91506110c482611083565b602082019050919050565b600060208201905081810360008301526110e8816110ac565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b6000611125600d83610fe0565b9150611130826110ef565b602082019050919050565b6000602082019050818103600083015261115481611118565b905091905056fea26469706673582212209cf573407fe4a6b491350201f5121bc4991136cb557f06e67195ed515997994b64736f6c63430008110033";

type DemoPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DemoPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DemoPaymaster__factory extends ContractFactory {
  constructor(...args: DemoPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DemoPaymaster> {
    return super.deploy(_entryPoint, overrides || {}) as Promise<DemoPaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): DemoPaymaster {
    return super.attach(address) as DemoPaymaster;
  }
  override connect(signer: Signer): DemoPaymaster__factory {
    return super.connect(signer) as DemoPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DemoPaymasterInterface {
    return new utils.Interface(_abi) as DemoPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DemoPaymaster {
    return new Contract(address, _abi, signerOrProvider) as DemoPaymaster;
  }
}
