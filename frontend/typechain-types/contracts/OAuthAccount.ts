/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type UserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  callGasLimit: PromiseOrValue<BigNumberish>;
  verificationGasLimit: PromiseOrValue<BigNumberish>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  maxFeePerGas: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export declare namespace OAuthAccount {
  export type PersonaDataStruct = {
    creator: PromiseOrValue<string>;
    allowTargets: PromiseOrValue<string>[];
    denyTargets: PromiseOrValue<string>[];
    balance: PromiseOrValue<BigNumberish>;
    mode: PromiseOrValue<BigNumberish>;
  };

  export type PersonaDataStructOutput = [
    string,
    string[],
    string[],
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    allowTargets: string[];
    denyTargets: string[];
    balance: BigNumber;
    mode: BigNumber;
  };
}

export interface OAuthAccountInterface extends utils.Interface {
  functions: {
    "approve(address)": FunctionFragment;
    "createPersona(address,address[],address[],uint112)": FunctionFragment;
    "createSharingPersona(address,address[],address[])": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "exec(address,uint256,bytes)": FunctionFragment;
    "execFromEntryPoint(address,uint256,bytes)": FunctionFragment;
    "getPersona(address)": FunctionFragment;
    "getPersonaByIndex(uint256)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "parseCalldata(bytes)": FunctionFragment;
    "sharingBalance()": FunctionFragment;
    "totalPersona()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "updateEntryPoint(address)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "createPersona"
      | "createSharingPersona"
      | "entryPoint"
      | "exec"
      | "execFromEntryPoint"
      | "getPersona"
      | "getPersonaByIndex"
      | "nonce"
      | "owner"
      | "parseCalldata"
      | "sharingBalance"
      | "totalPersona"
      | "transfer"
      | "updateEntryPoint"
      | "validateUserOp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPersona",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSharingPersona",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execFromEntryPoint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersona",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersonaByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseCalldata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPersona",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEntryPoint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      UserOperationStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPersona",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSharingPersona",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execFromEntryPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPersona", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPersonaByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPersona",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEntryPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address)": EventFragment;
    "EntryPointChanged(address,address)": EventFragment;
    "PersonaCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntryPointChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PersonaCreated"): EventFragment;
}

export interface ApprovalEventObject {
  spender: string;
}
export type ApprovalEvent = TypedEvent<[string], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface EntryPointChangedEventObject {
  oldEntryPoint: string;
  newEntryPoint: string;
}
export type EntryPointChangedEvent = TypedEvent<
  [string, string],
  EntryPointChangedEventObject
>;

export type EntryPointChangedEventFilter =
  TypedEventFilter<EntryPointChangedEvent>;

export interface PersonaCreatedEventObject {
  persona: string;
  creator: string;
  mode: BigNumber;
}
export type PersonaCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  PersonaCreatedEventObject
>;

export type PersonaCreatedEventFilter = TypedEventFilter<PersonaCreatedEvent>;

export interface OAuthAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OAuthAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSharingPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    exec(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execFromEntryPoint(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPersona(
      personaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[OAuthAccount.PersonaDataStructOutput]>;

    getPersonaByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, OAuthAccount.PersonaDataStructOutput]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseCalldata(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        funcHash: string;
        target: string;
        value: BigNumber;
      }
    >;

    sharingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPersona(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEntryPoint(
      newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPersona(
    signer: PromiseOrValue<string>,
    allow: PromiseOrValue<string>[],
    deny: PromiseOrValue<string>[],
    balance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSharingPersona(
    signer: PromiseOrValue<string>,
    allow: PromiseOrValue<string>[],
    deny: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  exec(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execFromEntryPoint(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPersona(
    personaAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<OAuthAccount.PersonaDataStructOutput>;

  getPersonaByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, OAuthAccount.PersonaDataStructOutput]>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseCalldata(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      funcHash: string;
      target: string;
      value: BigNumber;
    }
  >;

  sharingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalPersona(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEntryPoint(
    newEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: UserOperationStruct,
    userOpHash: PromiseOrValue<BytesLike>,
    aggregator: PromiseOrValue<string>,
    missingAccountFunds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSharingPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    exec(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    execFromEntryPoint(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPersona(
      personaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<OAuthAccount.PersonaDataStructOutput>;

    getPersonaByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, OAuthAccount.PersonaDataStructOutput]>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseCalldata(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        funcHash: string;
        target: string;
        value: BigNumber;
      }
    >;

    sharingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalPersona(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEntryPoint(
      newEntryPoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address)"(
      spender?: PromiseOrValue<string> | null
    ): ApprovalEventFilter;
    Approval(spender?: PromiseOrValue<string> | null): ApprovalEventFilter;

    "EntryPointChanged(address,address)"(
      oldEntryPoint?: PromiseOrValue<string> | null,
      newEntryPoint?: PromiseOrValue<string> | null
    ): EntryPointChangedEventFilter;
    EntryPointChanged(
      oldEntryPoint?: PromiseOrValue<string> | null,
      newEntryPoint?: PromiseOrValue<string> | null
    ): EntryPointChangedEventFilter;

    "PersonaCreated(address,address,uint256)"(
      persona?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      mode?: null
    ): PersonaCreatedEventFilter;
    PersonaCreated(
      persona?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      mode?: null
    ): PersonaCreatedEventFilter;
  };

  estimateGas: {
    approve(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSharingPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    exec(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execFromEntryPoint(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPersona(
      personaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPersonaByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseCalldata(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalPersona(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEntryPoint(
      newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSharingPersona(
      signer: PromiseOrValue<string>,
      allow: PromiseOrValue<string>[],
      deny: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exec(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execFromEntryPoint(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPersona(
      personaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPersonaByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseCalldata(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharingBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPersona(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEntryPoint(
      newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      aggregator: PromiseOrValue<string>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
